import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { cleanupOutdatedCaches, precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';

declare let self: ServiceWorkerGlobalScope;

// When the new service worker is installed, this message listener will prompt it to activate immediately.
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Precache all the assets generated by the build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present in the service worker file.
precacheAndRoute(self.__WB_MANIFEST);

// Remove old caches.
cleanupOutdatedCaches();

// Use a NetworkFirst strategy for game list API calls.
// This ensures the user always sees the latest list of games when online,
// and falls back to the cache only when offline.
registerRoute(
  ({ url }) => url.pathname === '/api/games',
  new NetworkFirst({
    cacheName: 'api-games-cache',
    plugins: [
      // Ensure that only successful responses are cached.
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

// Use a StaleWhileRevalidate strategy for other GET API requests.
// This is good for data that doesn't need to be real-time, like game assets or user profiles.
// IMPORTANT: We explicitly exclude /api/games which is handled above.
registerRoute(
  ({ request, url }) =>
    request.method === 'GET' &&
    url.pathname.startsWith('/api/') &&
    !url.pathname.startsWith('/api/games'),
  new StaleWhileRevalidate()
);

self.addEventListener('push', (event: PushEvent) => {
  const showNotification = async () => {
    if (!event.data) {
      console.error('Push event but no data');
      return;
    }

    const data = event.data.json();
    const gameCode = data.data?.gameCode;

    // Get all clients to check their visibility and URL.
    const allClients = await self.clients.matchAll({
      includeUncontrolled: true,
      type: 'window',
    });

    // Send refresh message to all active clients
    allClients.forEach(client => {
      if (client.visibilityState === 'visible') {
        console.log('[SW] Sending refresh games message to active client');
        client.postMessage({ type: 'REFRESH_GAMES' });
      }
    });

    // If the notification is for a specific game, only suppress it if that game's
    // URL is currently visible. This prevents silencing a "your turn" notification
    // just because the user has the lobby open.
    if (gameCode) {
      const gameUrl = `/game/${gameCode}`;
      const isGamePageVisible = allClients.some(client => {
        const clientUrl = new URL(client.url);
        return client.visibilityState === 'visible' && clientUrl.pathname === gameUrl;
      });

      if (isGamePageVisible) {
        console.log(`[SW] User is already viewing game ${gameCode}. Skipping notification.`);
        return;
      }
    } else {
      // For general notifications (not game-specific), we can suppress the
      // notification if any part of the app is visible.
      const isAppVisible = allClients.some(client => client.visibilityState === 'visible');
      if (isAppVisible) {
        console.log(
          '[SW] Non-game push event received, but a client is visible. Skipping notification.'
        );
        return;
      }
    }

    const title = data.title || 'Hexbound';
    const options = {
      body: data.body || 'You have a new notification.',
      icon: '/favicon/android-chrome-192x192.png',
      badge: '/favicon/favicon-32x32.png',
      data: data.data, // Attach custom data
    };

    await self.registration.showNotification(title, options);
  };

  event.waitUntil(showNotification());
});

self.addEventListener('notificationclick', (event: NotificationEvent) => {
  console.log('[SW] Notification click received.', event.notification.data);

  event.notification.close();

  const openGamePromise = async () => {
    const gameCode = event.notification.data?.gameCode;
    const gameUrl = gameCode ? `/game/${gameCode}` : '/';

    // This looks for an existing window and focuses it.
    const allClients = await self.clients.matchAll({
      includeUncontrolled: true,
      type: 'window',
    });

    for (const client of allClients) {
      // Use URL to easily parse the path, and ignore query strings
      const clientUrl = new URL(client.url);
      if (clientUrl.pathname === gameUrl) {
        console.log(`[SW] Found an existing window for ${gameUrl}. Focusing it.`);
        return client.focus();
      }
    }

    // If no window was found, open a new one.
    console.log(`[SW] No existing window found for ${gameUrl}. Opening a new one.`);
    return self.clients.openWindow(gameUrl);
  };

  event.waitUntil(openGamePromise());
});
