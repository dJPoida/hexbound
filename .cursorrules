This game is a hybrid of Civilization, Polytopia, and Populous. It is an asynchronous web-based strategy game using a hex grid and turn-based war mechanics.

# Game Features
- Web-based, mobile-friendly
- Asynchronous multiplayer
- Hexagonal tile grid
- Territory control and combat
- Populous-style god powers (e.g., terraforming)

# Tech Stack

## Game Stack and Architecture Decisions

### Rendering Library
- **Library**: PixiJS
- **Reasoning**: Kaboom.js is no longer maintained. PixiJS offers an actively supported, high-performance 2D WebGL renderer suitable for rendering hex grids and sprite-based elements in a browser. It provides granular rendering control and integrates well with TypeScript.

### Language
- **Primary Language**: TypeScript
- **Reasoning**: Ensures type safety and maintainability. Works seamlessly with modern tooling and the chosen rendering library (PixiJS).

### UI Layer
- **Approach**: DOM-based overlays (menus, HUD, dialogs)
- **Optional Library**: htm or Preact if UI complexity grows
- **Reasoning**: Avoid full-fledged frameworks like React to reduce overhead and improve performance in a game context.

### Backend Server
- **Framework**: Node.js with Express and Vite Dev Server. TypeORM for database connectivity and management.
- **Responsibilities**:
  - Serving static frontend assets (built by Vite).
  - Providing a RESTful API for game logic (state management, turns, player actions).
  - Managing WebSocket connections for real-time bi-directional communication of game functions.
- **Usage**: Run inside a terminal for development or runs as a service within the Docker environment for production.
- **Reasoning**: A robust and widely-used framework for building web servers and APIs. TypeScript support is excellent.

### Persistence Layer
- **Game Storage**: Redis
  - **Usage Example**:
    - `game:{gameId}` â†’ Full game state (hash)
  - **Reasoning**: Fast, in-memory data store suitable for session management and frequently changing game state. Runs as a service within the Docker environment.
- **Data Storage**: Postgres
  - **Reasoning**: Data permanence, traditional and queryable. Better for data like user database and reporting.

### Communication Model
- **Notification Technology**: Service workers polling the API managed by the Node.js/Express server and pushing notifications to the browser/device.
- **Real-time Updates**: WebSockets for instant game state synchronization across connected clients via the Node.js server.
- **Administrative functionality**: Basic functions like logging in, security, reporting etc... are managed by the Express API and Controllers
- **Gameplay functionality**: Web Socket communication between the client and the server

## Local Development Setup & Deployment

### Containerization & Orchestration
- **Tools**: Docker & Docker Compose
- **Reasoning**:
  - Provides a consistent development, testing, and production environment.
  - Simplifies setup of the application server and its dependencies (like Redis).
  - Defines the build process for the application via a `Dockerfile`.
  - Manages multi-container setup (app server, Redis) via `docker-compose.yml`.

### Frontend Development Tooling
- **Tool**: Vite (and Vite Dev Server middleware)
- **Reasoning**:
  - Fast builds and dependency caching for the frontend.
  - Excellent Hot Module Reloading (HMR) support
  - First-class TypeScript support.

### Development Workflow
- **Primary Command**: `npm run dev`
  - This command runs the Node.js server which uses Vite to build and serve the front end using HMR
  - The application is typically accessible at `http://localhost:3000`.
  - Server environment variables are loaded from `.env.local` via `dotenv`.
- **Starting Docker Services**: `npm run docker:up` (which executes `docker compose --env-file .env.local -f docker-compose.yml up -d`).
  - This ensures that all Docker containers (typically Redis and Postgres) are started and available.
- **Stopping Docker Services**: `npm run docker:down`.

### Environment Variable Management

Environment variables are managed as follows:

# AI Usage
- Refactor and simplify UI components and game logic.
- Generate boilerplate for new features (e.g., WebSocket handlers, new API endpoints).
- Write documentation and user onboarding flows.
- Design alternate UI/UX layouts or game ideas using natural language prompts.
- Recommend next steps and architectural improvements.
- Only add comments that describe code. Do not add comments that describe AI Agent actions or changes made by AI
- Comments in Preact JS Templated String style components should be made with `<!-- HTML Comment Syntax -->`
- It is possible for the Human to make changes to the code. Don't assume your memory of code is 100% correct.

## AI Rules. Never violate these constraints.
- When attempting to use the `__dirname` or `path.dirname` consider the helper function in `./src/shared/helpers/getModuleDir.helper.ts`
- Always consult the user with a planned action before assuming it is a problem that requires resolution. The user may have a difference of opinion and propose an alternate solution.
- Always propose updates to this file `.cursorrules` whenever major decisions are made that no longer align with the documentation or if documentation is lacking or missing entirely
- Whenever making a change to an API endpoint, WebSocket message, or their associated data payloads, you MUST update the `design/communication-protocol.md` file to reflect the changes.
- Prefer ENUMS or `as const` key/value types instead of hard-coded strings or values for switching data or configuration values.

# Data Models

This section outlines the primary data entities used in the application, managed by TypeORM.

## User Entity (`/src/server/entities/User.entity.ts`)

Represents a player in the game.

-   **`userId`**: `string` (Primary Key, UUID) - A unique identifier for the user.
-   **`userName`**: `string` - The user's chosen display name. Limited to 20 characters.

# Coding Conventions
- Use functional, composable modules where appropriate.
- Prefer clear, well-typed TypeScript code with explicit interfaces.
- Source code exists in `/src` and is separated into `server`, `client` and `shared` domains (shared houses types used across both server and client)

# Constants
The `src/shared/constants/` directory contains files for defining application-wide constants. Using these constants helps prevent bugs from typos and makes the code easier to maintain.
- **`api.const.ts`**: Defines constants for API endpoint paths.
- **`redis.const.ts`**: Defines key prefixes and helper functions for creating Redis keys.
- **`socket.const.ts`**: Defines the types for WebSocket messages.

# Backend Structure
The server-side application follows a clear structure for handling API requests.
- **Routes**: Located in `src/server/routes/`, these files define the API endpoints using Express Router. They are responsible for mapping HTTP methods and paths to controller functions. Route paths should use constants defined in `src/shared/constants/api.const.ts`.
- **Controllers**: Located in `src/server/controllers/`, these files contain the business logic for each API endpoint. They handle the request, interact with services or data models, and send the response.

# Frontend Structure
Client-side code is organized to promote modularity and maintainability.
- **Components**: Reusable UI components are located in `src/client/components/`.
  - Each component should reside in its own folder (e.g., `src/client/components/MyComponent/`).
  - The main component file should be named after the folder (e.g., `MyComponent.tsx` for JSX components, or `MyComponent.ts` for `htm`-based components).
  - All related files, such as styles or sub-components, should be co-located in the same folder.
- **Styling**: Component-specific styles are managed using CSS Modules.
  - Style files should have a `.module.css` extension (e.g., `MyComponent.module.css`).
  - These styles are imported into the component file and applied as objects (e.g., `styles.myClass`). This locally scopes class names and avoids global style conflicts.

# Backend Development & TypeORM
- **`reflect-metadata` Requirement**: For all TypeORM operations, especially migration generation, ensure `import 'reflect-metadata';` is the very first import in the server's entry point (`src/server/main.ts`).
- **Explicit Column Types**: If TypeORM migration generation fails with a type inference error (e.g., "cannot be guessed"), explicitly define the column type (e.g., `@Column('varchar')`) in the entity definition.
- **Entity Registration**: When a new TypeORM entity is created, it **must** be added to the `entities` array in the `DataSource` configuration file (`src/server/data-source.ts`).
- **NPM Script Arguments**: Before running npm scripts that pass arguments to an underlying command (like `typeorm`), verify the correct syntax in `package.json`, particularly the use of `--` to separate arguments.

# Backend Development & Express
- **Middleware-to-Controller Data Passing**: To ensure consistency and avoid bugs, middleware should always pass data to subsequent handlers by attaching it to the `res.locals` object. Controllers should then exclusively read from `res.locals` to retrieve this data. For example, `auth.middleware.ts` sets `res.locals.userId`, and controllers read from that property.

# Asset Management

## Icon Font Workflow
The project uses a custom icon font for UI elements, generated via IcoMoon. The source files are stored in `/design/assets/hexbound-icons`.

To update the icon font:
1. Replace the contents of `/design/assets/hexbound-icons` with the new files downloaded from IcoMoon.
2. Run the command `npm run update:icons`.

This script will automatically:
- Copy the `.woff` font file to `/src/client/public/fonts/HexboundIcons/`.
- Read the new `style.css`, update the font path, and append a cache-busting timestamp.
- Overwrite `/src/client/HexboundIcons.css` with the updated styles.

# Vite in Middleware Mode
**Reasoning**:
- Fast builds and dependency caching for the frontend.
- Excellent Hot Module Reloading (HMR) support.
- First-class TypeScript support.
- **Configuration**: When running Vite in `middlewareMode` from the Express server (`src/server/main.ts`), server-specific options (e.g., `allowedHosts`, `hmr`) must be configured within the `createViteServer` function call. The `server` block in `vite.config.ts` must be removed to prevent configuration conflicts that can lead to server instability.

### Development Workflow
- **Primary Command**: `npm run dev`
  - This command runs the Node.js server which uses Vite to build and serve the front end using HMR
  - The application is typically accessible at `http://localhost:3000`.
  - Server environment variables are loaded from `.env.local` via `dotenv`.
- **Starting Docker Services**: `npm run docker:up` (which executes `docker compose --env-file .env.local -f docker-compose.yml up -d`).
  - This ensures that all Docker containers (typically Redis and Postgres) are started and available.
- **Stopping Docker Services**: `npm run docker:down`.

### Environment Variable Management

Environment variables are managed as follows:

# Node.js Process Management
- **Signal Handling**: Do not use `async` functions directly as listeners for Node.js process signals (e.g., `process.on('SIGINT', async () => ...)`). This can lead to race conditions where the process exits before the async operation completes. Instead, use a synchronous handler that calls an `async` function to perform the cleanup.

# Data Models

This section outlines the primary data entities used in the application, managed by TypeORM.

## User Entity (`/src/server/entities/User.entity.ts`)

Represents a player in the game.

-   **`userId`**: `string` (Primary Key, UUID) - A unique identifier for the user.
-   **`userName`**: `string` - The user's chosen display name. Limited to 20 characters.

# Coding Conventions
- Use functional, composable modules where appropriate.
- Prefer clear, well-typed TypeScript code with explicit interfaces.
- Source code exists in `/src` and is separated into `server`, `client` and `shared` domains (shared houses types used across both server and client)

# Constants
The `src/shared/constants/` directory contains files for defining application-wide constants. Using these constants helps prevent bugs from typos and makes the code easier to maintain.
- **`api.const.ts`**: Defines constants for API endpoint paths.
- **`redis.const.ts`**: Defines key prefixes and helper functions for creating Redis keys.
- **`socket.const.ts`**: Defines the types for WebSocket messages.

# Backend Structure
The server-side application follows a clear structure for handling API requests.
- **Routes**: Located in `src/server/routes/`, these files define the API endpoints using Express Router. They are responsible for mapping HTTP methods and paths to controller functions. Route paths should use constants defined in `src/shared/constants/api.const.ts`.
- **Controllers**: Located in `src/server/controllers/`, these files contain the business logic for each API endpoint. They handle the request, interact with services or data models, and send the response.

# Frontend Structure
Client-side code is organized to promote modularity and maintainability.
- **Components**: Reusable UI components are located in `src/client/components/`.
  - Each component should reside in its own folder (e.g., `src/client/components/MyComponent/`).
  - The main component file should be named after the folder (e.g., `MyComponent.tsx` for JSX components, or `MyComponent.ts` for `htm`-based components).
  - All related files, such as styles or sub-components, should be co-located in the same folder.
- **Styling**: Component-specific styles are managed using CSS Modules.
  - Style files should have a `.module.css` extension (e.g., `MyComponent.module.css`).
  - These styles are imported into the component file and applied as objects (e.g., `styles.myClass`). This locally scopes class names and avoids global style conflicts.

# Backend Development & TypeORM
- **`reflect-metadata` Requirement**: For all TypeORM operations, especially migration generation, ensure `import 'reflect-metadata';` is the very first import in the server's entry point (`src/server/main.ts`).
- **Explicit Column Types**: If TypeORM migration generation fails with a type inference error (e.g., "cannot be guessed"), explicitly define the column type (e.g., `@Column('varchar')`) in the entity definition.
- **Entity Registration**: When a new TypeORM entity is created, it **must** be added to the `entities` array in the `DataSource` configuration file (`src/server/data-source.ts`).
- **NPM Script Arguments**: Before running npm scripts that pass arguments to an underlying command (like `typeorm`), verify the correct syntax in `package.json`, particularly the use of `--` to separate arguments.

# Asset Management

## Icon Font Workflow
The project uses a custom icon font for UI elements, generated via IcoMoon. The source files are stored in `/design/assets/hexbound-icons`.

To update the icon font:
1. Replace the contents of `/design/assets/hexbound-icons` with the new files downloaded from IcoMoon.
2. Run the command `npm run update:icons`.

This script will automatically:
- Copy the `.woff` font file to `/src/client/public/fonts/HexboundIcons/`.
- Read the new `style.css`, update the font path, and append a cache-busting timestamp.
- Overwrite `/src/client/HexboundIcons.css` with the updated styles.

# Project Structure
- **`build.cjs`**: A Node.js script that orchestrates the entire build process. It builds the server using esbuild and the client using Vite.
- **`data/`**: A directory used for storing persistent data, such as the Redis database files during local development. This directory is not checked into version control.
- **`design/`**: Contains design assets and mockups for the game, like architecture diagrams and asset source files.
- **`dist/`**: The output directory for the compiled and bundled code, generated by the build process. This directory is not checked into version control.
- **`node_modules/`**: Contains all the project's dependencies managed by npm. This directory is not checked into version control.
- **`src/`**: The main source code directory for the application.
  - **`client/`**: Contains all the client-side code.
    - **`components/`**: Reusable UI components (using Preact and htm).
    - **`public/`**: Static assets that are directly served, such as images or fonts.
    - **`types/`**: Contains types used exclusively by the client. Files in this folder are suffixed with `.type.ts` or `.interface.ts`
    - **`helpers/`**: Contains helper functions that are used exclusively by the client. Files in this folder are suffixed with `.helper.ts`
    - **`constants/`**: Contains constants that are used exclusively by the client. Files in this folder are suffixed with `.const.ts`
    - **`main.ts`**: The entry point for the client-side application. It initializes the PixiJS application and renders the UI.
    - **`App.module.css`**: CSS modules for styling the main application component.
    - **`global.css`**: Global styles applied to the entire application.
    - **`index.html`**: The main HTML file that serves as the entry point for the web application.
  - **`server/`**: Contains all the server-side code.
    - **`entities/`**: Contains TypeORM entity definitions that map to database tables.
    - **`migrations/`**: Contains database migration scripts generated by TypeORM.
    - **`types/`**: Contains types used exclusively by the server. Files in this folder are suffixed with `.type.ts` or `.interface.ts`
    - **`helpers/`**: Contains helper functions that are used exclusively by the server. Files in this folder are suffixed with `.helper.ts`
    - **`constants/`**: Contains constants that are used exclusively by the server. Files in this folder are suffixed with `.const.ts`
    - **`main.ts`**: The main entry point for the Node.js server. It sets up the Express server, WebSocket communication, and API routes.
    - **`apiRouter.ts`**: Defines the RESTful API endpoints for the game logic.
    - **`config.ts`**: Handles server configuration, including environment variables.
    - **`redisClient.ts`**: Manages the connection to the Redis data store.
  - **`shared/`**: Contains code and types that are shared between the client and the server to ensure consistency.
    - **`types/`**: Contains shared types used by both the client and server. Files in this folder are suffixed with `.type.ts` or `.interface.ts`
    - **`helpers/`**: Contains shared helper functions that are used by both the client and server. Files in this folder are suffixed with `.helper.ts`
    - **`constants/`**: Contains shared constants that are used by both the client and server. Files in this folder are suffixed with `.const.ts`
- **`.cursor/`**: Contains configuration and context files for the Cursor IDE.
- **`.vscode/`**: Contains workspace-specific settings for Visual Studio Code.
- **`Dockerfile`**: Defines the instructions for building the Docker image for the application, used for production deployment.
- **`docker-compose.yml`**: Configures the services (application server, Redis) for the local development environment using Docker Compose.
- **`docker-compose.prod.yml`**: A Docker Compose configuration specifically for the production environment.
- **`.gitignore`**: Specifies which files and directories should be ignored by Git.
- **`package.json`**: Defines project metadata, dependencies, and scripts for npm.
- **`tsconfig.json`**: The configuration file for the TypeScript compiler, specifying how to compile `.ts` files.
- **`vite.config.ts`**: The configuration file for Vite, used for the frontend development server and build process.
- **`README.md`**: The main documentation file for the project, providing an overview and setup instructions. 


# Map and Hex tile details for rendering in PixiJS
- Hex tiles are designed to represent basalt columns, aka column jointing.
- Hex tile orientation for the user makes them flat on the bottom and pointy on the sides.
- Hex tiles have an aspect ratio of 2:1 with a default size of 600x400px.
- The game allows for hex tiles to be raised and lowered, vertically offsetting them from the surrounding tiles. Therefore there are additional graphics for the two visible side walls and front wall of a hex tile.
- The map is scalable in width and height. The width represents the number of tiles from west to east (x-axis) and the height represents the number of tiles from north to south (y-axis).
- The map is finite in the y-axis (north to south) but cyclic in the x-axis (west to east). i.e. when a user is panning around the map, their viewport stops when it reaches the north-most or south-most tile, but when it reaches the east-most or westmost tile, it will render the next tile from the opposite end and allow the user to pan infinitely "around" the map in the x-axis.
- Hex tile graphics are stored in transparent `.png` files
  - The main hex graphic is 600x600px with a 5px margin resulting in a file that is 610x610px where the graphic content is inset by 5px. The hex, being 600x400px in nature, has a 200px buffer above it for future graphic elements such as buildings and other natural landscape features. Therefore, the "origin" of a hex graphic is pixel position [5, 405].
  - The graphic for the eastern visible side of the hex tile wall is 150x600px with a 5px margin resulting in a file that is 160x610px where the graphic content is inset by 5px. This graphic is designed to align with the east most corner of the hex tile. Therefore the origin of this tile is [5, 205].
  - The graphic for the front facing side of the hex tile is 300x400px with a 5px margin resulting in a file that is 310x410px where the graphic content is inset by 5px. This graphic is designed to align with the south-eastern most corner of the hex tile. Therefore the origin of this tile is [5, 205].
  - The graphic for the western visible side of the hex tile wall is the identical graphic for the eastern visible side of the wall, but mirrored/reflected in the X axis.
- Tiles need to be rendered within the user's viewport from North to South, West to East, to ensure they overlap and provide the illusion of the basalt columns.
- Tiles default at a "elevation" of 0. Tiles can have their elevation raised or lowered 4 times. Each level of vertical elevation represents 50px in the graphic relative to the original source hex images.
- The viewport that renders the "map" will be scalable/zoom-able by the user. All metrics provided in this ruleset are intrinsic.