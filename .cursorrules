This game is a hybrid of Civilization, Polytopia, and Populous. It is an asynchronous web-based strategy game using a hex grid and turn-based war mechanics.

# Game Features
- Web-based, mobile-friendly
- Asynchronous multiplayer
- Hexagonal tile grid
- Territory control and combat
- Populous-style god powers (e.g., terraforming)

# Tech Stack

## Game Stack and Architecture Decisions

### Rendering Library
- **Library**: PixiJS
- **Reasoning**: Kaboom.js is no longer maintained. PixiJS offers an actively supported, high-performance 2D WebGL renderer suitable for rendering hex grids and sprite-based elements in a browser. It provides granular rendering control and integrates well with TypeScript.

### Language
- **Primary Language**: TypeScript
- **Reasoning**: Ensures type safety and maintainability. Works seamlessly with modern tooling and the chosen rendering library (PixiJS).

### UI Layer
- **Approach**: DOM-based overlays (menus, HUD, dialogs)
- **Optional Library**: htm or Preact if UI complexity grows
- **Reasoning**: Avoid full-fledged frameworks like React to reduce overhead and improve performance in a game context.

### Backend Server
- **Framework**: Node.js with Express and Vite Dev Server. TypeORM for database connectivity and management.
- **Responsibilities**:
  - Serving static frontend assets (built by Vite).
  - Providing a RESTful API for game logic (state management, turns, player actions).
  - Managing WebSocket connections for real-time bi-directional communication of game functions.
- **Usage**: Run inside a terminal for development or runs as a service within the Docker environment for production.
- **Reasoning**: A robust and widely-used framework for building web servers and APIs. TypeScript support is excellent.

### Persistence Layer
- **Game Storage**: Redis
  - **Usage Example**:
    - `game:{gameId}` â†’ Full game state (hash)
  - **Reasoning**: Fast, in-memory data store suitable for session management and frequently changing game state. Runs as a service within the Docker environment.
- **Data Storage**: Postgres
  - **Reasoning**: Data permanence, traditional and queryable. Better for data like user database and reporting.

### Communication Model
- **Notification Technology**: Service workers polling the API managed by the Node.js/Express server and pushing notifications to the browser/device.
- **Real-time Updates**: WebSockets for instant game state synchronization across connected clients via the Node.js server.

## Local Development Setup & Deployment

### Containerization & Orchestration
- **Tools**: Docker & Docker Compose
- **Reasoning**:
  - Provides a consistent development, testing, and production environment.
  - Simplifies setup of the application server and its dependencies (like Redis).
  - Defines the build process for the application via a `Dockerfile`.
  - Manages multi-container setup (app server, Redis) via `docker-compose.yml`.

### Frontend Development Tooling
- **Tool**: Vite (and Vite Dev Server middleware)
- **Reasoning**:
  - Fast builds and dependency caching for the frontend.
  - Excellent Hot Module Reloading (HMR) support
  - First-class TypeScript support.

### Development Workflow
- **Primary Command**: `npm run dev`
  - This command runs the Node.js server which uses Vite to build and serve the front end using HMR
  - The application is typically accessible at `http://localhost:3000`.
  - Server environment variables are loaded from `.env.local` via `dotenv`.
- **Starting Docker Services**: `npm run docker:up` (which executes `docker compose --env-file .env.local -f docker-compose.yml up -d`).
  - This ensures that all Docker containers (typically Redis and Postgres) are started and available.
- **Stopping Docker Services**: `npm run docker:down`.

### Environment Variable Management

Environment variables are managed as follows:

# AI Usage
- Refactor and simplify UI components and game logic.
- Generate boilerplate for new features (e.g., WebSocket handlers, new API endpoints).
- Write documentation and user onboarding flows.
- Design alternate UI/UX layouts or game ideas using natural language prompts.
- Recommend next steps and architectural improvements.
- Only add comments that describe code. Do not add comments that describe AI Agent actions or changes made by AI
- Comments in Preact JS Templated String style components should be made with `<!-- HTML Comment Syntax -->`
- It is possible for the Human to make changes to the code. Don't assume your memory of code is 100% correct.

## AI Rules. Never violate these constraints.
- When attempting to use the `__dirname` or `path.dirname` consider the helper function in `./src/shared/helpers/getModuleDir.helper.ts`
- When an unexpected issue prevents the solution of a request, consult the user before attempting the automatic resolution of the problem. Do not attempt to automatically resolve issues you encounter.

# Coding Conventions
- Use functional, composable modules where appropriate.
- Prefer clear, well-typed TypeScript code with explicit interfaces.
- Source code exists in `/src` and is separated into `server`, `client` and `shared` domains (shared houses types used across both server and client)

# Project Structure
- **`build.cjs`**: A Node.js script that orchestrates the entire build process. It builds the server using esbuild and the client using Vite.
- **`data/`**: A directory used for storing persistent data, such as the Redis database files during local development. This directory is not checked into version control.
- **`design/`**: Contains design assets and mockups for the game, like architecture diagrams and asset source files.
- **`dist/`**: The output directory for the compiled and bundled code, generated by the build process. This directory is not checked into version control.
- **`node_modules/`**: Contains all the project's dependencies managed by npm. This directory is not checked into version control.
- **`src/`**: The main source code directory for the application.
  - **`client/`**: Contains all the client-side code.
    - **`components/`**: Reusable UI components (using Preact and htm).
    - **`public/`**: Static assets that are directly served, such as images or fonts.
    - **`types/`**: Contains types used exclusively by the client. Files in this folder are suffixed with `.type.ts` or `.interface.ts`
    - **`helpers/`**: Contains helper functions that are used exclusively by the client. Files in this folder are suffixed with `.helper.ts`
    - **`constants/`**: Contains constants that are used exclusively by the client. Files in this folder are suffixed with `.const.ts`
    - **`main.ts`**: The entry point for the client-side application. It initializes the PixiJS application and renders the UI.
    - **`App.module.css`**: CSS modules for styling the main application component.
    - **`global.css`**: Global styles applied to the entire application.
    - **`index.html`**: The main HTML file that serves as the entry point for the web application.
  - **`server/`**: Contains all the server-side code.
    - **`types/`**: Contains types used exclusively by the server. Files in this folder are suffixed with `.type.ts` or `.interface.ts`
    - **`helpers/`**: Contains helper functions that are used exclusively by the server. Files in this folder are suffixed with `.helper.ts`
    - **`constants/`**: Contains constants that are used exclusively by the server. Files in this folder are suffixed with `.const.ts`
    - **`main.ts`**: The main entry point for the Node.js server. It sets up the Express server, WebSocket communication, and API routes.
    - **`apiRouter.ts`**: Defines the RESTful API endpoints for the game logic.
    - **`config.ts`**: Handles server configuration, including environment variables.
    - **`redisClient.ts`**: Manages the connection to the Redis data store.
  - **`shared/`**: Contains code and types that are shared between the client and the server to ensure consistency.
    - **`types/`**: Contains shared types used by both the client and server. Files in this folder are suffixed with `.type.ts` or `.interface.ts`
    - **`helpers/`**: Contains shared helper functions that are used by both the client and server. Files in this folder are suffixed with `.helper.ts`
    - **`constants/`**: Contains shared constants that are used by both the client and server. Files in this folder are suffixed with `.const.ts`
- **`.cursor/`**: Contains configuration and context files for the Cursor IDE.
- **`.vscode/`**: Contains workspace-specific settings for Visual Studio Code.
- **`Dockerfile`**: Defines the instructions for building the Docker image for the application, used for production deployment.
- **`docker-compose.yml`**: Configures the services (application server, Redis) for the local development environment using Docker Compose.
- **`docker-compose.prod.yml`**: A Docker Compose configuration specifically for the production environment.
- **`.gitignore`**: Specifies which files and directories should be ignored by Git.
- **`package.json`**: Defines project metadata, dependencies, and scripts for npm.
- **`tsconfig.json`**: The configuration file for the TypeScript compiler, specifying how to compile `.ts` files.
- **`vite.config.ts`**: The configuration file for Vite, used for the frontend development server and build process.
- **`README.md`**: The main documentation file for the project, providing an overview and setup instructions. 