This game is a hybrid of Civilization, Polytopia, and Populous. It is an asynchronous web-based strategy game using a hex grid and turn-based war mechanics.

# Game Features

- Web-based, mobile-friendly
- Asynchronous multiplayer
- Hexagonal tile grid
- Territory control and combat
- Populous-style god powers (e.g., terraforming)

# Tech Stack

## Game Stack and Architecture Decisions

### Rendering Library

- **Library**: PixiJS
- **Reasoning**: Kaboom.js is no longer maintained. PixiJS offers an actively supported, high-performance 2D WebGL renderer suitable for rendering hex grids and sprite-based elements in a browser. It provides granular rendering control and integrates well with TypeScript.

### Language

- **Primary Language**: TypeScript
- **Reasoning**: Ensures type safety and maintainability. Works seamlessly with modern tooling and the chosen rendering library (PixiJS).

### UI Layer

- **Approach**: DOM-based overlays (menus, HUD, dialogs)
- **Optional Library**: htm or Preact if UI complexity grows
- **Reasoning**: Avoid full-fledged frameworks like React to reduce overhead and improve performance in a game context.

### Backend Server

- **Framework**: Node.js with Express and Vite Dev Server. TypeORM for database connectivity and management.
- **Responsibilities**:
  - Serving static frontend assets (built by Vite).
  - Providing a RESTful API for game logic (state management, turns, player actions).
  - Managing WebSocket connections for real-time bi-directional communication of game functions.
- **Usage**: Run inside a terminal for development or runs as a service within the Docker environment for production.
- **Reasoning**: A robust and widely-used framework for building web servers and APIs. TypeScript support is excellent.

### Persistence Layer

- **Game Storage**: Redis
  - **Usage Example**:
    - `game:{gameId}` → Full game state (hash)
  - **Reasoning**: Fast, in-memory data store suitable for session management and frequently changing game state. Runs as a service within the Docker environment.
- **Data Storage**: Postgres
  - **Reasoning**: Data permanence, traditional and queryable. Better for data like user database and reporting.

### Communication Model

- **Notification Technology**: Service workers polling the API managed by the Node.js/Express server and pushing notifications to the browser/device.
- **Real-time Updates**: WebSockets for instant game state synchronization across connected clients via the Node.js server.
- **Administrative functionality**: Basic functions like logging in, security, reporting etc... are managed by the Express API and Controllers
- **Gameplay functionality**: Web Socket communication between the client and the server

## Local Development Setup & Deployment

### Containerization & Orchestration

- **Tools**: Docker & Docker Compose
- **Reasoning**:
  - Provides a consistent development, testing, and production environment.
  - Simplifies setup of the application server and its dependencies (like Redis).
  - Defines the build process for the application via a `Dockerfile`.
  - Manages multi-container setup (app server, Redis) via `docker-compose.yml`.

### Frontend Development Tooling

- **Tool**: Vite (and Vite Dev Server middleware)
- **Reasoning**:
  - Fast builds and dependency caching for the frontend.
  - Excellent Hot Module Reloading (HMR) support
  - First-class TypeScript support.

### Development Workflow

- **Primary Command**: `npm run dev`
  - This command runs the Node.js server which uses Vite to build and serve the front end using HMR
  - The application is typically accessible at `http://localhost:3000`.
  - Server environment variables are loaded from `.env.local` via `dotenv`.
- **Starting Docker Services**: `npm run docker:up` (which executes `docker compose --env-file .env.local -f docker-compose.yml up -d`).
  - This ensures that all Docker containers (typically Redis and Postgres) are started and available.
- **Stopping Docker Services**: `npm run docker:down`.

### Environment Variable Management

Environment variables are managed as follows:

# AI Usage

- Refactor and simplify UI components and game logic.
- Generate boilerplate for new features (e.g., WebSocket handlers, new API endpoints).
- Write documentation and user onboarding flows.
- Design alternate UI/UX layouts or game ideas using natural language prompts.
- Recommend next steps and architectural improvements.
- Only add comments that describe code. Do not add comments that describe AI Agent actions or changes made by AI
- Comments in Preact JS Templated String style components should be made with `<!-- HTML Comment Syntax -->`
- It is possible for the Human to make changes to the code in-between conversations with AI. Don't assume that AI or AI Agent memory of code is 100% correct.
- Don't attempt to run the dev server to verify the code as part of a conversation. The Human will be in charge of running the dev server.
- Don't be overly polite. Apologizing for mistakes or inaccuracies takes the user time to read and is unnecessary. Keep responses appropriately detailed, but succinct.

## AI Rules. Never violate these constraints.

- When attempting to use the `__dirname` or `path.dirname` consider the helper function in `./src/shared/helpers/getModuleDir.helper.ts`
- Always consult the user with a planned action before assuming it is a problem that requires resolution. The user may have a difference of opinion and propose an alternate solution.
- Always propose updates to this file `.cursorrules` whenever major decisions are made that no longer align with the documentation or if documentation is lacking or missing entirely
- Whenever making a change to an API endpoint, WebSocket message, or their associated data payloads, you MUST update the `design/communication-protocol.md` file to reflect the changes.
- Prefer ENUMS or `as const` key/value types instead of hard-coded strings or values for switching data or configuration values.

### Design System Compliance Rules

- **CSS Tokens**: ALWAYS reference the "CSS Design Tokens System" section before creating or modifying colors, fonts, or spacing. Use `tokens.module.css` as the single source of truth.
- **Button Implementation**: ALWAYS reference the "Button Implementation Architecture" section before modifying buttons. Follow the established SVG gem button system and dual-architecture during migration.
- **Color Usage**: ALWAYS use the 4-tier color system (base/light/dark/highlight) for any new UI elements requiring depth or lighting effects.
- **Token Consistency**: NEVER create hardcoded color values - always check existing tokens first or add new ones to `tokens.module.css` following the established patterns.

# Data Models

This section outlines the primary data entities used in the application, managed by TypeORM.

## User Entity (`/src/server/entities/User.entity.ts`)

Represents a player in the game.

- **`userId`**: `string` (Primary Key, UUID) - A unique identifier for the user.
- **`userName`**: `string` - The user's chosen display name. Limited to 20 characters.

# Coding Conventions

- Use functional, composable modules where appropriate.
- Prefer clear, well-typed TypeScript code with explicit interfaces.
- Source code exists in `/src` and is separated into `server`, `client` and `shared` domains (shared houses types used across both server and client)

# Constants

The `src/shared/constants/` directory contains files for defining application-wide constants. Using these constants helps prevent bugs from typos and makes the code easier to maintain.

- **`api.const.ts`**: Defines constants for API endpoint paths.
- **`redis.const.ts`**: Defines key prefixes and helper functions for creating Redis keys.
- **`socket.const.ts`**: Defines the types for WebSocket messages.

# Backend Structure

The server-side application follows a clear structure for handling API requests.

- **Routes**: Located in `src/server/routes/`, these files define the API endpoints using Express Router. They are responsible for mapping HTTP methods and paths to controller functions. Route paths should use constants defined in `src/shared/constants/api.const.ts`.
- **Controllers**: Located in `src/server/controllers/`, these files contain the business logic for each API endpoint. They handle the request, interact with services or data models, and send the response.

### Map Generation Pipeline

To create complex and believable worlds, map generation uses a layered, pipeline-based approach encapsulated within the `MapGenerator` class (`src/server/helpers/mapGenerator.ts`). This strategy is designed for clarity, extensibility, and control over the order of operations.

- **Pipeline Structure**: The `MapGenerator`'s main `generate()` method executes a series of private methods in a specific sequence. Each method acts as a "generation pass," responsible for applying a specific rule or feature to the map.
- **Layered Rules**: The order of the passes is critical. Early passes lay down foundational terrain (e.g., ice caps, oceans), while later passes fill in the remaining areas (e.g., grasslands) or add details based on the existing terrain (e.g., forests next to mountains).
- **Extensibility**: To add a new map feature, a new private method (a "pass") is created and inserted into the `generate()` pipeline at the appropriate stage. This keeps each rule's logic isolated and makes the system easy to expand.

# Frontend Structure

Client-side code is organized to promote modularity and maintainability.

- **Components**: Reusable UI components are located in `src/client/components/`.
  - Each component should reside in its own folder (e.g., `src/client/components/MyComponent/`).
  - The main component file should be named after the folder (e.g., `MyComponent.tsx` for JSX components, or `MyComponent.ts` for `htm`-based components).
  - All related files, such as styles or sub-components, should be co-located in the same folder.
- **Styling**: Component-specific styles are managed using CSS Modules.
  - Style files should have a `.module.css` extension (e.g., `MyComponent.module.css`).
  - These styles are imported into the component file and applied as objects (e.g., `styles.myClass`). This locally scopes class names and avoids global style conflicts.

# Frontend Component Design System

- **Component Philosophy**: Atomic design - build small, single-purpose components that compose into larger organisms
- **Prop Naming Conventions**: Use `variant` over `type`, `isDisabled` over `disabled`, follow boolean prop patterns with `is/has/can` prefixes
- **Styling Strategy**: Enhanced CSS Modules with shared design tokens via CSS custom properties for consistency and reusability
- **Performance Priority**: Focus performance optimization on PixiJS rendering; DOM component overhead is secondary concern
- **Design Aesthetic**: Medieval/fantasy theme only - no multiple theme support needed
- **Accessibility**: No accessibility requirements for this game context
- **Responsive Design**: Game-focused responsive approach rather than traditional website breakpoints:
  - **Primary Contexts**: Mobile vs Desktop (touch vs mouse interaction)
  - **Orientation Handling**: Portrait vs Landscape considerations for mobile devices
  - **UI Scaling**: Proportional scaling based on screen size rather than content reflow
  - **Touch Targets**: Minimum 44px touch targets for mobile interactions
  - **Form Factors**: Optimize for both mobile portrait gameplay and desktop landscape gameplay

## Component Type Co-location Pattern

### Philosophy

Component-specific types, enums, and constants should be co-located with their components rather than placed in shared constant files. This promotes better encapsulation, easier maintenance, and clearer ownership of types.

### When to Co-locate vs. Share

**Co-locate with Component:**

- Enums for component variants (e.g., `ButtonVariant`, `InputType`)
- Component-specific interfaces and props
- Constants used exclusively by that component
- Types that describe the component's behavior or appearance

**Keep in Shared Constants:**

- Cross-cutting application concerns (e.g., `AppView`, `ConnectionStatus`)
- API routes and WebSocket message types
- Game logic constants (e.g., map generation, terrain types)
- Constants used by multiple unrelated services

### Implementation Guidelines

1. **Export Pattern**: Export enums and interfaces directly from the component file

   ```typescript
   // Component.tsx
   export enum ComponentVariant {
     PRIMARY = "primary",
     SECONDARY = "secondary",
   }

   export interface ComponentProps {
     variant?: ComponentVariant;
     // other props...
   }
   ```

2. **Index File**: Create a clean index.ts for components with multiple exports

   ```typescript
   // Component/index.ts
   export { Component, ComponentVariant, ComponentType } from "./Component";
   export type { ComponentProps } from "./Component";
   ```

3. **Import Pattern**: Import both component and types from the same location

   ```typescript
   import { Component, ComponentVariant } from "../Component/Component";
   ```

4. **Migration Strategy**: When refactoring existing shared constants:
   - Move component-specific enums to their component files
   - Update all imports across the codebase
   - Remove unused exports from shared constant files
   - Maintain backward compatibility during transition

### Examples

- ✅ **Good**: `ButtonVariant` exported from `Button.tsx`
- ✅ **Good**: `InputType` exported from `Input.tsx`
- ✅ **Good**: `SOCKET_MESSAGE_TYPES` in shared constants (used by multiple services)
- ❌ **Bad**: `ButtonVariant` in shared `ui.const.ts` file
- ❌ **Bad**: Component props interface in separate type file

### Benefits

- **Locality of Concerns**: Types are defined where they're most relevant
- **Easier Discovery**: No hunting through shared files when working on a component
- **Better Encapsulation**: Components own their types
- **Cleaner Imports**: More explicit about dependencies
- **Easier Refactoring**: Moving/deleting a component takes its types with it
- **Reduced Shared File Bloat**: Prevents shared constants from becoming unwieldy

## CSS Design Tokens System

### Token Source of Truth

- **`src/client/tokens.module.css`** is the ONLY source of truth for design tokens
- **NEVER** declare color, font, or spacing tokens in `global.css` or component CSS files
- If a token doesn't exist in `tokens.module.css`, add it there rather than creating local variables

### Color Token Naming Convention

All colors follow a 4-tier system for depth and lighting effects:

- **Base color**: `--color-{name}` (e.g., `--color-hex-amber`)
- **Light variant**: `--color-{name}-light` (for highlights, top edges)
- **Dark variant**: `--color-{name}-dark` (for shadows, bottom edges)
- **Highlight variant**: `--color-{name}-highlight` (for brightest reflections)

### Adding New Color Tokens

When adding a new color family:

1. Define all 4 variants in `tokens.module.css` under the appropriate section
2. Use semantic names that describe the color, not its usage
3. Follow the existing pattern: `#base → #light → #dark → #highlight`
4. Example:
   ```css
   --color-forest-green: #2d5a3d;
   --color-forest-green-dark: #1f3d2a;
   --color-forest-green-light: #4a7c5a;
   --color-forest-green-highlight: #6b9b7a;
   ```

### Font Token Guidelines

- Use semantic naming: `--font-primary`, `--font-button`, etc.
- Maintain legacy aliases for compatibility when refactoring
- Font sizes use rem units with px comments: `--font-size-lg: 1.125rem; /* 18px */`

### Token Usage Rules

- **ALWAYS** use `var(--token-name)` instead of hardcoded values
- **NEVER** create component-specific color variants - use the 4-tier system
- **ALWAYS** check `tokens.module.css` first before adding new tokens
- Use semantic color mapping: success → moss-green, warning → glow-yellow, etc.

## CSS Maintenance & Quality Standards

### CSS Module Best Practices

**Preventing Unused CSS:**

- **NEVER** leave unused CSS classes in module files
- **ALWAYS** remove CSS when removing component features
- **REGULARLY** audit CSS modules for unused classes (quarterly cleanup)
- **IMMEDIATELY** delete CSS classes when refactoring components

**Preventing Duplicate CSS:**

- **NEVER** define the same class name twice in one CSS module
- **ALWAYS** check for existing classes before creating new ones
- **CONSOLIDATE** similar styling patterns into shared design tokens
- **AVOID** copying CSS between components - use shared tokens instead

**Component Override Prevention:**

- **NEVER** write CSS that targets standardized components (Button, Input, Checkbox, etc.)
- **NEVER** use generic element selectors (`button`, `input`) that could affect standardized components
- **ALWAYS** use the component's built-in props and variants instead of CSS overrides
- **REFACTOR** components to use standardized components rather than custom CSS

### Design Token Migration Rules

**When encountering hardcoded values:**

- **IMMEDIATELY** replace hardcoded colors with design tokens
- **IMMEDIATELY** replace hardcoded font sizes with design token equivalents
- **IMMEDIATELY** replace hardcoded spacing with `--space-*` tokens
- **IMMEDIATELY** replace hardcoded border radius with `--border-radius-*` tokens
- **ADD** missing tokens to `tokens.module.css` if needed, following established patterns

**Hardcoded Value Prevention:**

- **NEVER** use hex colors, rgba values, or hsl colors directly in CSS
- **NEVER** use hardcoded rem/px values for font sizes (except in token definitions)
- **NEVER** use hardcoded rem/px values for spacing (except in token definitions)
- **NEVER** use hardcoded px values for border radius (except in token definitions)
- **ALWAYS** use CSS custom properties from the design system

### CSS Code Review Checklist

Before merging any CSS changes, verify:

- [ ] No hardcoded color values (use design tokens)
- [ ] No hardcoded font sizes (use design tokens)
- [ ] No hardcoded spacing values (use design tokens)
- [ ] No hardcoded border radius values (use design tokens)
- [ ] No CSS overriding standardized components
- [ ] No unused CSS classes remaining
- [ ] No duplicate CSS class definitions
- [ ] All new tokens follow 4-tier naming convention
- [ ] Component-specific types/enums co-located (not in shared constants)

### CSS Refactoring Guidelines

**When to clean up CSS:**

- **IMMEDIATELY** when removing component features
- **BEFORE** shipping any major feature
- **DURING** component migrations to standardized components
- **QUARTERLY** as part of technical debt reduction
- **WHENEVER** hardcoded values are discovered

**How to clean up CSS:**

1. **Identify unused classes** using grep/search across codebase
2. **Replace hardcoded values** with design tokens systematically
3. **Remove component overrides** by using standardized component props
4. **Eliminate duplicates** by consolidating similar patterns
5. **Add missing tokens** to maintain design system completeness

### Legacy CSS Migration Strategy

**When encountering legacy CSS:**

- **ASSESS** if the component should use a standardized component instead
- **MIGRATE** to standardized components when functionality allows
- **EXTRACT** reusable patterns into design tokens
- **DOCUMENT** any remaining custom CSS with clear justification
- **PLAN** future migration to standardized patterns

**Red Flags requiring immediate attention:**

- CSS classes overriding Button component styling
- CSS classes overriding Input/Checkbox component styling
- Hardcoded rgba/hex color values
- Duplicate class definitions across modules
- Unused CSS classes (grep shows no usage)
- Generic element selectors that could affect standardized components

## Button Implementation Architecture

### Current Button System

The application uses a **dual-button architecture** during the transition period:

- **`OldButton`** and **`OldMenuButton`**: Legacy CSS-based buttons (`src/client/components/OldButton/`)
- **`Button`**: New SVG-based gem buttons (`src/client/components/Button/`)

### SVG Gem Button Structure

The new `Button` component uses **7 layered SVG elements** for 3D gem lighting effects:

1. **Background**: Base color fill that stretches horizontally
2. **Left Edge**: Light color, fixed position
3. **Right Edge**: Light color, dynamic position
4. **Top Edge**: Light color, stretches horizontally
5. **Bottom Edge**: Dark color, creates shadow effect
6. **Accents**: Highlight color, reflective overlay effect
7. **Outline**: Charcoal stroke for grounding and definition

### Button Color Implementation Rules

- **Background**: Uses base color token (`--color-hex-amber`) with no stroke
- **Edges (left, right, top)**: Use light color token (`--color-hex-amber-light`)
- **Bottom edge**: Uses dark color token (`--color-hex-amber-dark`) for shadow
- **Accents**: Uses highlight color token (`--color-hex-amber-highlight`) for reflections
- **Outline**: Uses charcoal stroke (`--color-charcoal`) with 1px width for grounding
- **Text**: Always uses `--color-canvas-white` for contrast
- **Disabled state**: Outline uses `--color-stone-grey` for muted appearance

### Dynamic Width Scaling System

The gem buttons adapt to both content and container requirements:

- **Content-based sizing**: Uses `min-width` based on text measurement for baseline size
- **Flex-responsive**: With `fullWidth={true}`, buttons grow to fill flex containers using `flex: 1`
- **SVG scaling**: Responsive SVG sizing - 100% width for fullWidth, calculated width for content-based
- **ViewBox coordination**: `preserveAspectRatio='none'` allows fullWidth buttons to stretch properly
- **Opacity rendering**: Buttons start invisible until width is calculated to prevent visual jumping
- **Text measurement**: Uses DOM measurement to calculate minimum required button width

### Button Implementation Guidelines

- **NEVER** modify existing `OldButton` components - they are preserved for stability
- **ALWAYS** use the established 7-layer SVG structure for new button variants
- **ALWAYS** follow the 4-tier color system (base/light/dark/highlight) for gem lighting
- **ALWAYS** include touch prevention CSS: `user-select: none`, `-webkit-tap-highlight-color: transparent`
- **ALWAYS** use `line-height: 1` for proper text vertical alignment
- **ALWAYS** implement opacity-based rendering to prevent width transition flicker

### Button Variant Creation

When creating new button variants:

1. Add the variant to the `ButtonProps` interface
2. Create CSS rules for all 7 SVG elements using the 4-tier color system
3. Ensure disabled state handling for all elements
4. Test with various text lengths to verify proper scaling
5. Verify touch/mobile behavior to prevent selection highlighting

### Migration Strategy

- **Phase 1**: New `Button` component complete and tested (✅ DONE)
- **Phase 2**: Gradually replace `OldButton` usage in components
- **Phase 3**: Remove `OldButton` components when all usage is migrated
- **NEVER** rush the migration - test thoroughly in each component

### Button Accessibility & UX

- **Touch targets**: Minimum 50px height (current gem buttons meet this)
- **Text shadows**: Use `2px 2px 1px rgba(0, 0, 0, 0.5)` for readability
- **Hover effects**: `translateY(-1px)` and `filter: brightness(1.05)`
- **Active effects**: `translateY(1px)` and `filter: brightness(0.95)`
- **Disabled state**: `opacity: 0.7` and `filter: grayscale(0.5)`

## Form Components Architecture

### Form Component Philosophy

All form components follow consistent patterns for medieval/fantasy styling, accessibility, and user experience. Form components include Input, Checkbox, and future components like Select, Radio, and Textarea.

### Input Component Implementation

The `Input` component (`src/client/components/Input/Input.tsx`) provides a comprehensive text input solution:

**Visual Design:**

- **Parchment-like styling**: Subtle inset shadows and canvas-white background
- **Focus states**: Amber highlight ring with enhanced background
- **Error states**: Clay-red coloring for validation feedback
- **Disabled states**: Muted colors with reduced opacity
- **Size variants**: Default and large options

**Typography & Layout:**

- **Font**: Uses `--font-primary` (Exo 2) for consistency
- **Vertical alignment**: Asymmetric padding to compensate for font baseline (10px top, 6px bottom for default; 18px top, 14px bottom for large)
- **Line height**: Reduced to 1.2 for better visual centering
- **Touch targets**: Minimum 44px height for mobile accessibility

**Form Integration:**

- **Controlled/Uncontrolled**: Supports both controlled (value prop) and uncontrolled (defaultValue) patterns
- **Event handling**: Comprehensive event support (onChange, onFocus, onBlur, onInput, onKeyDown, onKeyUp)
- **Validation**: Built-in support for required, pattern, minLength, maxLength attributes
- **Accessibility**: Full ARIA support with labels, descriptions, and error states

### Checkbox Component Implementation

The `Checkbox` component (`src/client/components/Checkbox/Checkbox.tsx`) provides toggle selection functionality:

**Visual Design:**

- **Clean styling**: No background or border frames - focused on icon and text
- **Icon system**: Uses Hexbound icon font (`hbi-square` and `hbi-check-square`)
- **Interactive effects**: Icon scaling and color changes on hover/focus/checked states
- **Size variants**: Default and large options with proportional scaling

**Typography & Layout:**

- **Font alignment**: Uses `margin-top: 0.5em` to compensate for Imperator font baseline
- **Spacing**: Proportional spacing between icon and text (`--space-sm` for default, `--space-md` for large)
- **Touch targets**: Minimum 44px height with appropriate padding

**Accessibility & Form Integration:**

- **Keyboard navigation**: Space/Enter key support with focus management
- **ARIA compliance**: Full role="checkbox", aria-checked, and labeling support
- **Form compatibility**: Hidden native checkbox for proper form submission
- **State management**: Controlled component pattern with onChange callback

### Form Component Design Guidelines

**Visual Consistency:**

- **ALWAYS** use design tokens from `tokens.module.css` for colors, fonts, and spacing
- **ALWAYS** follow the 4-tier color system for interactive states (base/light/dark/highlight)
- **NEVER** use hardcoded color values or spacing - reference existing tokens

**Typography Considerations:**

- **Imperator font baseline**: Form components must compensate for font baseline alignment issues
- **Text inputs**: Use asymmetric padding (more top than bottom)
- **Labels/text**: Use positive margin-top in `em` units for proportional scaling
- **Line height**: Use 1.2 for optimal vertical centering

**Interactive States:**

- **Focus**: Use amber highlight ring (`--color-hex-amber-light`) for consistency
- **Hover**: Subtle transforms and color changes for feedback
- **Disabled**: Muted colors with `--color-stone-grey` variants and reduced opacity
- **Error**: Use clay-red color family for validation feedback

**Accessibility Requirements:**

- **Touch targets**: Minimum 44px hit areas for mobile devices
- **Keyboard support**: Full keyboard navigation and activation
- **Screen readers**: Proper ARIA attributes and semantic HTML structure
- **High contrast**: Support for `prefers-contrast: high` media query
- **Reduced motion**: Support for `prefers-reduced-motion: reduce` media query

### Form Component Creation Process

When creating new form components:

1. **Component Structure**: Follow the established pattern with comprehensive TypeScript interfaces
2. **CSS Architecture**: Use CSS Modules with design token references
3. **Event Handling**: Use proper JSX.TargetedEvent types for Preact compatibility
4. **State Management**: Support both controlled and uncontrolled patterns
5. **Accessibility**: Include full ARIA support and keyboard navigation
6. **StyleGuide Integration**: Add examples to demonstrate all states and variants
7. **Testing**: Verify proper form submission and validation behavior

### Legacy Form Element Migration

- **Replace all native HTML form elements** with styled components for consistency
- **Preserve functionality**: Ensure all existing features and validation work unchanged
- **Clean up CSS**: Remove redundant styles from component CSS files after migration
- **Update imports**: Add new component imports where needed

## Unified Routing Architecture

### UnifiedRouter System

The application uses a **centralized routing system** via the `UnifiedRouter` component (`src/client/components/framework/UnifiedRouter/UnifiedRouter.tsx`) that handles all navigation and view rendering in one place.

**Architecture Overview:**
```
App.tsx → UnifiedRouter → [AppHeader + Content] → Views (Lobby/Game/Utils/StyleGuide)
```

**Key Benefits:**
- **Single source of truth** for all routing logic
- **Unified header management** across all views
- **Consistent layout patterns** for all routes
- **Simplified navigation** with one `navigate()` function
- **URL-driven state** - no separate `currentView` state needed

### UnifiedRouter Implementation

The `UnifiedRouter` component provides:

**Route Detection:**
- **Game routes**: `/game/:gameCode` - Renders GameViewLayout with game state
- **Lobby route**: `/` - Renders LobbyView with game list
- **Utils route**: `/utils` - Renders UtilsPage
- **StyleGuide route**: `/styleguide` - Renders StyleGuidePage

**Header Management:**
- **Automatic header selection** based on current route
- **Context-aware props** - game headers get turn/counter data
- **Unified navigation** via single `onNavigate` callback

**Content Rendering:**
- **Route-specific layouts** with consistent padding and centering
- **Dialog overlay management** for non-game views
- **Game dialog integration** via GameViewLayout for game views

### Navigation System

**Unified Navigation Function:**
```typescript
const navigate = (path: string, gameData?: { gameId: string; gameCode: string }) => {
  // Handles both game and non-game navigation
  // Manages socket connections and state cleanup
  // Updates browser history and triggers re-render
};
```

**Navigation Patterns:**
- **Game navigation**: `navigate('/game/ABC123', { gameId, gameCode })`
- **Standard navigation**: `navigate('/utils')`, `navigate('/styleguide')`, `navigate('/')`
- **Automatic cleanup**: Disconnects sockets when leaving games
- **State management**: Updates game state and IDs appropriately

### Dialog Management Architecture

**Two-tier dialog system:**

1. **Game dialogs**: Handled by GameViewLayout - overlay the game viewport
2. **App-level dialogs**: Handled by UnifiedRouter - overlay entire app with backdrop

**Dialog Rendering Rules:**
- **Game view**: Dialogs render within GameViewLayout's `mainContent` area
- **Other views**: Dialogs render via UnifiedRouter's `dialogOverlay` with full-screen backdrop
- **Consistent styling**: Both use the same Dialog component for consistent appearance

### Migration from Old Architecture

**Replaced Components:**
- ❌ **Old Router** - Basic route mapping without state management
- ❌ **LobbyPage** - Thin wrapper that just fetched games and passed to LobbyView
- ❌ **LobbyLayout** - Simple layout wrapper with padding
- ❌ **Separate headers** - GameHeader and LobbyHeader with duplicated logic

**New Unified Structure:**
- ✅ **UnifiedRouter** - Handles all routing, headers, and layout
- ✅ **Direct view rendering** - No unnecessary wrapper layers
- ✅ **App-level data management** - Game fetching and state at App.tsx level
- ✅ **Single navigation interface** - One function for all route changes

### Implementation Guidelines

**When adding new routes:**
1. **Add route detection** in `getRouteInfo()` method
2. **Update header rendering** in `renderHeader()` if needed
3. **Add content rendering** in `renderContent()` method  
4. **Follow layout patterns** - use consistent padding and centering
5. **Test dialog behavior** - ensure dialogs overlay correctly

**Route-specific considerations:**
- **Game routes**: Must handle socket connections and game state
- **Utility routes**: Simple content rendering with standard layout
- **Dialog handling**: Non-game routes use app-level dialog overlay

**Navigation best practices:**
- **Always use** the unified `navigate()` function
- **Never manipulate** `window.history` directly outside of `navigate()`
- **Handle cleanup** - ensure sockets disconnect when leaving games
- **State consistency** - let URL be the single source of truth for routing

### Legacy Architecture Migration

**Before (Complex):**
```
App → [GameHeader + GameViewLayout] | [Router → LobbyPage → LobbyLayout → LobbyView]
```

**After (Unified):**
```
App → UnifiedRouter → [AppHeader + Content]
```

**Benefits Achieved:**
- **50% fewer components** in the routing chain
- **Eliminated state duplication** - no currentView vs URL conflicts  
- **Single navigation function** instead of 5 separate functions
- **Consistent header behavior** across all views
- **Simplified dialog management** with proper overlay system

# Backend Development & TypeORM

- **`reflect-metadata` Requirement**: For all TypeORM operations, especially migration generation, ensure `import 'reflect-metadata';` is the very first import in the server's entry point (`src/server/main.ts`).
- **Explicit Column Types**: If TypeORM migration generation fails with a type inference error (e.g., "cannot be guessed"), explicitly define the column type (e.g., `@Column('varchar')`) in the entity definition.
- **Entity Registration**: When a new TypeORM entity is created, it **must** be added to the `entities` array in the `DataSource` configuration file (`src/server/data-source.ts`).
- **NPM Script Arguments**: Before running npm scripts that pass arguments to an underlying command (like `typeorm`), verify the correct syntax in `package.json`, particularly the use of `--` to separate arguments.

# Backend Development & Express

- **Middleware-to-Controller Data Passing**: To ensure consistency and avoid bugs, middleware should always pass data to subsequent handlers by attaching it to the `res.locals` object. Controllers should then exclusively read from `res.locals` to retrieve this data. For example, `auth.middleware.ts` sets `res.locals.userId`, and controllers read from that property.

# Asset Management

## Icon Font Workflow

The project uses a custom icon font for UI elements, generated via IcoMoon. The source files are stored in `/design/assets/hexbound-icons`.

To update the icon font:

1. Replace the contents of `/design/assets/hexbound-icons` with the new files downloaded from IcoMoon.
2. Run the command `npm run update:icons`.

This script will automatically:

- Copy the `.woff` font file to `/src/client/public/fonts/HexboundIcons/`.
- Read the new `style.css`, update the font path, and append a cache-busting timestamp.
- Overwrite `/src/client/HexboundIcons.css` with the updated styles.

# Vite in Middleware Mode

**Reasoning**:

- Fast builds and dependency caching for the frontend.
- Excellent Hot Module Reloading (HMR) support.
- First-class TypeScript support.
- **Configuration**: When running Vite in `middlewareMode` from the Express server (`src/server/main.ts`), server-specific options (e.g., `allowedHosts`, `hmr`) must be configured within the `createViteServer` function call. The `server` block in `vite.config.ts` must be removed to prevent configuration conflicts that can lead to server instability.

### Development Workflow

- **Primary Command**: `npm run dev`
  - This command runs the Node.js server which uses Vite to build and serve the front end using HMR
  - The application is typically accessible at `http://localhost:3000`.
  - Server environment variables are loaded from `.env.local` via `dotenv`.
- **Starting Docker Services**: `npm run docker:up` (which executes `docker compose --env-file .env.local -f docker-compose.yml up -d`).
  - This ensures that all Docker containers (typically Redis and Postgres) are started and available.
- **Stopping Docker Services**: `npm run docker:down`.

### Environment Variable Management

Environment variables are managed as follows:

# Node.js Process Management

- **Signal Handling**: Do not use `async` functions directly as listeners for Node.js process signals (e.g., `process.on('SIGINT', async () => ...)`). This can lead to race conditions where the process exits before the async operation completes. Instead, use a synchronous handler that calls an `async` function to perform the cleanup.

# Project Structure

- **`build.cjs`**: A Node.js script that orchestrates the entire build process. It builds the server using esbuild and the client using Vite.
- **`data/`**: A directory used for storing persistent data, such as the Redis database files during local development. This directory is not checked into version control.
- **`design/`**: Contains design assets and mockups for the game, like architecture diagrams and asset source files.
- **`dist/`**: The output directory for the compiled and bundled code, generated by the build process. This directory is not checked into version control.
- **`node_modules/`**: Contains all the project's dependencies managed by npm. This directory is not checked into version control.
- **`src/`**: The main source code directory for the application.
  - **`client/`**: Contains all the client-side code.
    - **`components/`**: Reusable UI components (using Preact and htm).
    - **`public/`**: Static assets that are directly served, such as images or fonts.
    - **`types/`**: Contains types used exclusively by the client. Files in this folder are suffixed with `.type.ts` or `.interface.ts`
    - **`helpers/`**: Contains helper functions that are used exclusively by the client. Files in this folder are suffixed with `.helper.ts`
    - **`constants/`**: Contains constants that are used exclusively by the client. Files in this folder are suffixed with `.const.ts`
    - **`main.ts`**: The entry point for the client-side application. It initializes the PixiJS application and renders the UI.
    - **`App.module.css`**: CSS modules for styling the main application component.
    - **`global.css`**: Global styles applied to the entire application.
    - **`index.html`**: The main HTML file that serves as the entry point for the web application.
  - **`server/`**: Contains all the server-side code.
    - **`entities/`**: Contains TypeORM entity definitions that map to database tables.
    - **`migrations/`**: Contains database migration scripts generated by TypeORM.
    - **`types/`**: Contains types used exclusively by the server. Files in this folder are suffixed with `.type.ts` or `.interface.ts`
    - **`helpers/`**: Contains helper functions that are used exclusively by the server. Files in this folder are suffixed with `.helper.ts`
    - **`constants/`**: Contains constants that are used exclusively by the server. Files in this folder are suffixed with `.const.ts`
    - **`main.ts`**: The main entry point for the Node.js server. It sets up the Express server, WebSocket communication, and API routes.
    - **`apiRouter.ts`**: Defines the RESTful API endpoints for the game logic.
    - **`config.ts`**: Handles server configuration, including environment variables.
    - **`redisClient.ts`**: Manages the connection to the Redis data store.
  - **`shared/`**: Contains code and types that are shared between the client and the server to ensure consistency.
    - **`types/`**: Contains shared types used by both the client and server. Files in this folder are suffixed with `.type.ts` or `.interface.ts`
    - **`helpers/`**: Contains shared helper functions that are used by both the client and server. Files in this folder are suffixed with `.helper.ts`
    - **`constants/`**: Contains shared constants that are used by both the client and server. Files in this folder are suffixed with `.const.ts`
- **`.cursor/`**: Contains configuration and context files for the Cursor IDE.
- **`.vscode/`**: Contains workspace-specific settings for Visual Studio Code.
- **`Dockerfile`**: Defines the instructions for building the Docker image for the application, used for production deployment.
- **`docker-compose.yml`**: Configures the services (application server, Redis) for the local development environment using Docker Compose.
- **`docker-compose.prod.yml`**: A Docker Compose configuration specifically for the production environment.
- **`.gitignore`**: Specifies which files and directories should be ignored by Git.
- **`package.json`**: Defines project metadata, dependencies, and scripts for npm.
- **`tsconfig.json`**: The configuration file for the TypeScript compiler, specifying how to compile `.ts` files.
- **`vite.config.ts`**: The configuration file for Vite, used for the frontend development server and build process.
- **`README.md`**: The main documentation file for the project, providing an overview and setup instructions.

# Map and Hex tile details for rendering in PixiJS

- Hex tiles are designed to represent basalt columns, aka column jointing.
- Hex tile orientation for the user makes them flat on the bottom and pointy on the sides.
- Hex tiles have an aspect ratio of 2:1 with a default size of 120x80px.
- The game allows for hex tiles to be raised and lowered, vertically offsetting them from the surrounding tiles. Therefore the sprite for a hex tile has two visible side walls and a front wall or the hex tile. The three rear walls are not relevant as they cannot be seen by the user.
- The map is scalable in width and height. The width represents the number of tiles from west to east (x-axis) and the height represents the number of tiles from north to south (y-axis).
- The map is finite in the y-axis (north to south) but cyclic in the x-axis (west to east). i.e. when a user is panning around the map, their viewport stops when it reaches the north-most or south-most tile, but when it reaches the east-most or westmost tile, it will render the next tile from the opposite end and allow the user to pan infinitely "around" the map in the x-axis.
- The hex sprite graphic file is a transparent .png whose content is 120x150px with a 5px margin resulting in a file that is 130x160px. The hex component of the graphic is located in the file 5px from the edge and is 120x80px in nature. Therefore, the "local origin" of a hex graphic is pixel position [5, 5].
- The three walls of the hex are embedded in the same sprite.
- Tiles need to be rendered within the user's viewport in honeycomb rows where the tiles are sorted in render order from North-most to South-most, West to East, to ensure they overlap and provide the illusion of the basalt columns.
- Tiles default at a "elevation" of 0. Tiles can have their elevation raised or lowered 4 times. Each level of vertical elevation represents 10px in the graphic relative to the original source hex images. The walls do not stretch or shrink to represent the elevation, they are anchored to the hex. By rendering the hex with an offset in the y axis, it will provide the illusion of elevation on a tile.
- The viewport that renders the "map" will be scalable/zoom-able by the user. All metrics provided in this ruleset are intrinsic.
- definitions for map metrics and configurable elements are stored in `src/shared/constants/map.const.ts`.
- each tile has a variant or "biome" that is used to determine the sprite chosen to render the file. Biomes include:
  - plains (`tile_plains.png`)
  - ocean (`tile_ocean.png`)
  - icecap (`tile_icecap.png`)
- There are two outline sprites used to visually define the hex grid
  - outline (`hex_outline.png`) is used on every tile to define the grid for the user
  - selected (`hex_selected.png`) is used to indicate the tile the user has "selected" on the map

# Architectural Patterns

## Decoupling Rendering from Component Lifecycle

To prevent race conditions and bugs related to the component lifecycle (e.g., a `useEffect` cleanup function destroying an object that another part of the effect is still trying to use), all complex, imperative rendering logic (e.g., PIXI.Application, viewport management) should be encapsulated within a singleton service (e.g., `rendering.service.ts`).

React/Preact components (like `Viewport.tsx`) should remain "dumb". Their responsibility is limited to:

- Calling the service's `initialize()` method in a `useEffect` with an empty dependency array (`[]`) to ensure it runs only on mount.
- Calling the service's `destroy()` method in the cleanup function of that same `useEffect`.
- Calling the service's data update methods (e.g., `updateMap()`) in a separate `useEffect` that watches for specific prop changes (e.g., `[mapData]`).

This pattern ensures that the lifecycle of the complex rendering objects is managed independently from the component's re-render cycle.

## Rendering Engine Architecture

To manage the complexity of a dynamic, 2.5D hex grid, the rendering engine uses two primary patterns:

### Tile Entity Pattern

- **Encapsulation**: Each individual hex tile is represented by a `Tile` class instance (`src/client/rendering/Tile.ts`).
- **Responsibilities**: This class is responsible for creating, positioning, and managing all the `PIXI.Sprite` objects that make up a single tile (the hex top, walls, and text). In the future, it will also manage its own state (e.g., `currentElevation`, `targetElevation`) and handle its own animations (e.g., tweening between elevations).
- **Benefit**: This pattern simplifies the `MapRenderer`, turning it into a manager that orchestrates `Tile` objects rather than micromanaging thousands of individual sprites.

### Layered Rendering for Z-Indexing

- **The Problem**: Dynamically updating a tile's elevation can break the visual layering, causing a now-taller tile to incorrectly appear behind the tiles in front of it.
- **The Solution**: The `MapRenderer` creates a dedicated `PIXI.Container` for each **row** of the map. All `Tile` objects for a given row are added to that row's container.
- **Benefit**: This fixes the z-indexing issue permanently. The draw order of the rows is established once at initialization (North to South). When a tile is updated, it's only modified _within_ its row container, preserving the overall draw order and ensuring correct visual layering without expensive re-sorting of all sprites.
